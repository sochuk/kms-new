"function" != typeof Object.create && (Object.create = function (t) { function o() { } return o.prototype = t, new o }), function (t, o, i, s) { "use strict"; var n = { _positionClasses: ["bottom-left", "bottom-right", "top-right", "top-left", "bottom-center", "top-center", "mid-center"], _defaultIcons: ["success", "error", "info", "warning"], init: function (o, i) { this.prepareOptions(o, t.notify.options), this.process() }, prepareOptions: function (o, i) { var s = {}; "string" == typeof o || o instanceof Array ? s.text = o : s = o, this.options = t.extend({}, i, s) }, process: function () { this.setup(), this.addToDom(), this.position(), this.bindToast(), this.animate() }, setup: function () { var o = "", i = ""; if (this._toast = this._toast || t("<div></div>", { class: "notify", role: "alert" }), o += '<div class="notify-header">', o += '<span class="notify-loader"></span>', this.options.allowToastClose && (o += '<span class="close-notify-single ml-2 mb-1 close">&times;</span>'), this.options.text instanceof Array) { this.options.heading && (o += '<span class="notify-heading">' + this.options.heading + "</span>"), i += '<ul class="notify-ul">'; for (var s = 0; s < this.options.text.length; s++)i += '<li class="notify-li" id="notify-item-' + s + '">' + this.options.text[s] + "</li>"; i += "</ul>", o += "</div>" } else this.options.heading && (o += '<span class="notify-heading">' + this.options.heading + "</span>"), o += "</div>", o += '<div class="notify-body">', i += this.options.text + "</div>"; this._toast.html(o + i), !1 !== this.options.bgColor && this._toast.css("background-color", this.options.bgColor), !1 !== this.options.textColor && this._toast.css("color", this.options.textColor), this.options.textAlign && this._toast.css("text-align", this.options.textAlign), !1 !== this.options.icon && (this._toast.find(".notify-header").addClass("notify-has-icon"), -1 !== t.inArray(this.options.icon, this._defaultIcons) && this._toast.addClass("notify-icon-" + this.options.icon)), !1 !== this.options.class && this._toast.addClass(this.options.class) }, position: function () { "string" == typeof this.options.position && -1 !== t.inArray(this.options.position, this._positionClasses) ? "bottom-center" === this.options.position ? this._container.css({ left: t(o).outerWidth() / 2 - this._container.outerWidth() / 2, bottom: 20 }) : "top-center" === this.options.position ? this._container.css({ left: t(o).outerWidth() / 2 - this._container.outerWidth() / 2, top: 20 }) : "mid-center" === this.options.position ? this._container.css({ left: t(o).outerWidth() / 2 - this._container.outerWidth() / 2, top: t(o).outerHeight() / 2 - this._container.outerHeight() / 2 }) : this._container.addClass(this.options.position) : "object" == typeof this.options.position ? this._container.css({ top: this.options.position.top ? this.options.position.top : "auto", bottom: this.options.position.bottom ? this.options.position.bottom : "auto", left: this.options.position.left ? this.options.position.left : "auto", right: this.options.position.right ? this.options.position.right : "auto" }) : this._container.addClass("bottom-left") }, bindToast: function () { var t = this; this._toast.on("afterShown", function () { t.processLoader() }), this._toast.find(".close-notify-single").on("click", function (o) { o.preventDefault(), "fade" === t.options.showHideTransition ? (t._toast.trigger("beforeHide"), t._toast.fadeOut(function () { t._toast.trigger("afterHidden") })) : "slide" === t.options.showHideTransition ? (t._toast.trigger("beforeHide"), t._toast.slideUp(function () { t._toast.trigger("afterHidden") })) : (t._toast.trigger("beforeHide"), t._toast.hide(function () { t._toast.trigger("afterHidden") })) }), "function" == typeof this.options.beforeShow && this._toast.on("beforeShow", function () { t.options.beforeShow() }), "function" == typeof this.options.afterShown && this._toast.on("afterShown", function () { t.options.afterShown() }), "function" == typeof this.options.beforeHide && this._toast.on("beforeHide", function () { t.options.beforeHide() }), "function" == typeof this.options.afterHidden && this._toast.on("afterHidden", function () { t.options.afterHidden() }) }, addToDom: function () { var o = t(".notify-wrap"); if (0 === o.length ? (o = t("<div></div>", { class: "notify-wrap ml-1 mr-3" }), t("body").append(o)) : (!this.options.stack || isNaN(parseInt(this.options.stack, 10))) && o.empty(), o.find(".notify:hidden").remove(), o.append(this._toast), o.append(this._toastBody), this.options.stack && !isNaN(parseInt(this.options.stack), 10)) { var i = o.find(".notify").length - this.options.stack; i > 0 && t(".notify-wrap").find(".notify").slice(0, i).remove() } this._container = o }, canAutoHide: function () { return !1 !== this.options.hideAfter && !isNaN(parseInt(this.options.hideAfter, 10)) }, processLoader: function () { if (!this.canAutoHide() || !1 === this.options.loader) return !1; var t = this._toast.find(".notify-loader"), o = (this.options.hideAfter - 400) / 1e3 + "s", i = this.options.loaderBg, s = t.attr("style") || ""; s = s.substring(0, s.indexOf("-webkit-transition")), s += "-webkit-transition: width " + o + " ease-in;                       -o-transition: width " + o + " ease-in;                       transition: width " + o + " ease-in;                       background-color: " + i + ";", t.attr("style", s).addClass("notify-loaded") }, animate: function () { var t = this; if (this._toast.hide(), this._toast.trigger("beforeShow"), "fade" === this.options.showHideTransition.toLowerCase() ? this._toast.fadeIn(function () { t._toast.trigger("afterShown") }) : "slide" === this.options.showHideTransition.toLowerCase() ? this._toast.slideDown(function () { t._toast.trigger("afterShown") }) : this._toast.show(function () { t._toast.trigger("afterShown") }), this.canAutoHide()) { t = this; o.setTimeout(function () { "fade" === t.options.showHideTransition.toLowerCase() ? (t._toast.trigger("beforeHide"), t._toast.fadeOut(function () { t._toast.trigger("afterHidden") })) : "slide" === t.options.showHideTransition.toLowerCase() ? (t._toast.trigger("beforeHide"), t._toast.slideUp(function () { t._toast.trigger("afterHidden") })) : (t._toast.trigger("beforeHide"), t._toast.hide(function () { t._toast.trigger("afterHidden") })) }, this.options.hideAfter) } }, reset: function (o) { "all" === o ? t(".notify-wrap").remove() : this._toast.remove() }, update: function (t) { this.prepareOptions(t, this.options), this.setup(), this.bindToast() } }; t.notify = function (t) { var o = Object.create(n); return o.init(t, this), { reset: function (t) { o.reset(t) }, update: function (t) { o.update(t) } } }, t.notify.options = { text: "", heading: "", showHideTransition: "fade", allowToastClose: !0, hideAfter: 3e3, loader: !0, loaderBg: "#6c757d", stack: 5, position: "bottom-left", bgColor: !1, textColor: !1, textAlign: "left", icon: !1, beforeShow: function () { }, afterShown: function () { }, beforeHide: function () { }, afterHidden: function () { } } }(jQuery, window, document);